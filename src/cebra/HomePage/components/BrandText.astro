---
import type { HTMLTag } from 'astro/types'

enum VariantKeys {
  banner,
  title,
  subtitle,
  spaced,
  cta,
  body,
  'body-accent',
  'header-card',
  'body-card',
  'big-number',
}

type Variant = keyof typeof VariantKeys

interface VariantObj {
  as: HTMLTag
  css: string
}

const Variants: Record<Variant, VariantObj> = {
  'banner': {
    as: 'h1',
    css: 'text-5xl font-extrabold uppercase',
  },
  'title': {
    as: 'h2',
    css: 'text-5xl font-extrabold uppercase leading-tight',
  },
  'subtitle': {
    as: 'h3',
    css: 'text-xl font-extrabold uppercase',
  },
  'spaced': {
    as: 'p',
    css: 'text-xs font-semibold tracking-[0.17rem] leading-loose uppercase',
  },
  'cta': {
    as: 'p',
    css: 'text-sm font-bold uppercase',
  },
  'body': {
    as: 'p',
    css: 'text-lg leading-loose',
  },
  'body-accent': {
    as: 'p',
    css: 'text-lg font-semibold',
  },
  'header-card': {
    as: 'h3',
    css: 'text-3xl font-extrabold',
  },
  'body-card': {
    as: 'p',
    css: 'text-base leading-relaxed',
  },
  'big-number': {
    as: 'p',
    css: 'text-8xl font-extrabold',
  },
}

const Colors = {
  'none': '',
  'white': 'text-white',
  'black': 'text-black',
  'black-secondary': 'text-neutral-600',
  'yellow': 'text-cebra-accent-1',
  'sky': 'text-cebra-accent-2',
}

type Color = keyof typeof Colors

interface Props {
  variant: Variant
  color?: Color
  class?: string
}

const { variant, color = 'none', class: className, ...props } = Astro.props
const { as: Tag, css } = Variants[variant]

const classes = [className, css, Colors[color]]
---

<Tag
  class:list={classes}
  {...props}
  ><slot /></Tag
>
